floorParam = (p.x + modY/2.0) / modY;
p.x = p.x - modY * floor(floorParam);
p.x = mod(p.x + 1.0, 2.0) - 1.0;

floorParam = (p.y + modY/2.0) / modY;
p.y = p.y - modY * floor(floorParam);
p.y = mod(p.y + 1.0, 2.0) - 1.0;

floorParam = (p.z + modY/2.0) / modY;
p.z = p.z - modY * floor(floorParam);
p.z = mod(p.z + 1.0, 2.0) - 1.0;



For SDF matrix rotation:
https://en.wikipedia.org/wiki/Rotation_matrix


// blending values method for smin
// root smin
float sminR( float a, float b, float k )
{
    k *= 2.0;
    float x = b-a;
    return 0.5*( a+b-sqrt(x*x+k*k) );
}

// exponential smooth minimum
float sminExp( float a, float b, float k )
{
    k *= 1.0;
    float r = exp2(-a/k) + exp2(-b/k);
    return -k*log2(r);
}

// sigmoid smooth minimum
float sminSigm( float a, float b, float k )
{
    k *= log(2.0);
    float x = b-a;
    return a + x/(1.0-exp2(x/k));
}
